/**
 * @author Brijesh Sharma
 * Copyright (c) 2020, Brijesh Sharma 
 * All rights reserved. 
 * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree. 
 */
package a3.model.request;

import static a3.service.A3Service.Property.*;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;

import a3.model.Model;
import a3.service.A3ServiceUtil;

/**
 * @author <b>Brijesh Sharma</b><br>
 * This class represent a single cloud request, which can be exchanged between cloud services.<br>
 * 
 * <b>Data Model</b><br>
 * 1. {@link #id}: Uniquely identify a request. Caller can either set it as per their need, or use 
 * auto-generated by this class. There can be maximum of one request id per {@link A3Request} class<br>
 *  &nbsp;&nbsp;&nbsp;&nbsp;1.1 {@link #intIdLength} - Configurable Request id length to be assigned to each request id. 
 *  Caller can override this id. Default is set to {@link CloudServiceConstants#DEFAULT_REQUEST_ID_LENGTH}<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;1.2 {@link #strIdPrefix} - Prefix assigned to each message id. Message id length is inclusive 
 * of prefix length. Default is set to {@link CloudServiceConstants#DEFAULT_REQUEST_ID_PREFIX}<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;1.3 {@link #SEPARATOR_TOKEN} - Separator to be used while generating message id. Default separator used is 
 * {@link CloudServiceConstants#DEFAULT_REQUEST_ID_SEPARATOR_TOKEN}<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;1.4 {@link #SEPARATOR_TOKEN_LENGTH}- Separator length to be used while generating message id. 
 * Default separator length used is {@link CloudServiceConstants#DEFAULT_REQUEST_ID_SEPARATOR_TOKEN_LENGTH}<br>
 * 2. {@link #object}: Caller can use any Java type as a request object. Caller can use Request Id to fetch this 
 * object from {@link A3Requests} class<br>
 * 3. {@link #createdTime} - Time when the item was created<br>
 * 4. {@link #updatedTime} - Time when the item was last updated<br>
 * 5. {@link #keyValueMap}: The class maintains an internal map of type <String, String>, which caller can use to store 
 * and get additional key-value pairs. For example, implementation of {@link A3RequestTransformer} must ensure to store cloud notification
 * service subject as a key with name {@link CloudServiceConstants#SUBJECT}<br>
 * 6. {@link nativeRequestObj}" implementation of {@link A3RequestTransformer} can use it to store cloud provider
 * specific could native request object, which was transformed by {@link A3RequestTransformer}<br>
 */
public class A3Request implements Serializable, Cloneable, Model {

	public enum Property {USER_IDENTITY, EVENT_TYPE, HTTP_METHOD, GET, POST};
	
	private static final long serialVersionUID = 4692685954484497609L;
	protected String id;
	protected transient int intIdLength = Integer.parseInt(DEFAULT_MSG_ID_LENGTH.getText()); 
	protected transient String strIdPrefix = DEFAULT_MSG_ID_PREFIX.getText();
	protected transient final int SEPARATOR_TOKEN_LENGTH = Integer.parseInt(DEFAULT_MSG_ID_SEPARATOR_TOKEN_LENGTH.getText());
	protected transient final String SEPARATOR_TOKEN = DEFAULT_MSG_ID_SEPARATOR_TOKEN.getText();
	protected Object object;	
	protected String createdTime; //Time when the message was created
	protected String updatedTime; //Time when the message was last updated
	protected Map<String, String> keyValueMap = new HashMap<String, String>();
	protected List<String> suppressFields = new ArrayList<String>();
	protected Object nativeObject = null;
	
	@Override
	public A3Request wrapIntoCloudRequest() { return this; }
	
	@Override
	public String toJsonString() {
		ObjectNode body = JsonNodeFactory.instance.objectNode();
		body.set("Request", A3ServiceUtil.buildJsonBody(this));
		return body.toString();
	}

	public static String getRequestJsonTagName() {
		return "Request";
	}
	
	/**----------------------Constructors------------------------**/
	public A3Request() {
		generateAndAssignId();
		this.createdTime = new Timestamp(System.currentTimeMillis()).toString();
		update();
	}
	public A3Request(Object object) {
		generateAndAssignId();
		this.object = object;
		this.createdTime = new Timestamp(System.currentTimeMillis()).toString();
		update();
	}
	public A3Request(String id, Object object) {
		this.id = id;
		this.object = object;
		this.createdTime = new Timestamp(System.currentTimeMillis()).toString();
		update();
	}
	public A3Request withId(String id) {
		this.id = id;
		update();
		return this;	
	}
	public A3Request withObject(Object object) {
		this.object = object;
		if (this.id == null) {generateAndAssignId();}
		update();
		return this;
	}
	public A3Request withNativeObject(Object nativ) {
		this.nativeObject = nativ;
		if (this.id == null) {generateAndAssignId();}
		update();
		return this;
	}
	public A3Request withKeyValue(String key, String value) {
		keyValueMap.put(key, value);
		update();
		return this;	
	}
	public A3Request withIdLength(int length) {
		this.intIdLength = length;
		update();
		return this;	
	}
	public A3Request withIdPrefix(String prefix) {
		this.strIdPrefix = prefix;
		update();
		return this;
	}
	public A3Request build() {
		update();
		return this;
	}
	
	
	/**---------------------------------------Setter Methods----------------------------------*/
	public void addSuppressField(String field) {
		if(field == null) return; suppressFields.add(field); update();
	}
	public void setSuppressFields(List<String> suppressFields) { 
		if(suppressFields == null) return;
		for(String str: suppressFields) {
			if(!this.suppressFields.contains(str))
				this.suppressFields.add(str);
		}
		
	}
	public void setId(String id) {this.id = id; 	update();}
	public void setIdLength(int length) {this.intIdLength = length; 	update();}
	public void setIdPrefix(String prefix) {this.strIdPrefix = prefix; update();}
	public void setObject(Object object) {this.object = object; update();}
	public void addKeyValue(String key, String value) { keyValueMap.put(key, value); update(); }
	public void deleteKeyValue(String key) {keyValueMap.remove(key); update();}
	public void setNativeObject(Object nativ) {	this.nativeObject = nativ; update(); }
	
	/**---------------------------------------Getter Methods----------------------------------*/
	public List<String> getSuppressFields() {return suppressFields; }
	public String getId() { return id; }
	public Object getObject() { return object; }
	public Object getNativeObject() { return nativeObject;}
	public String getValueByKey(String key) { return keyValueMap.get(key);	}
	public String getValueByKeyIgnoreCase(String key) { 
		for (Map.Entry<String, String> entry: keyValueMap.entrySet()) {
			if (entry.getKey().trim().equalsIgnoreCase(key.trim()))
				return entry.getValue();
		}
		
		return null;	
	}
	public Map<String, String> getKeyValueMap() { return keyValueMap; }
	public String getUpdatedTime() {	return updatedTime;	}
	public String getCreatedTime() {	return createdTime;	}
	
	public String toString() {
		String toString = getClass().getSimpleName() + "{Id:" + getId() + "|Object:[" + getObject() + "]|Created_Time:" + getCreatedTime()
			+ "|Updated_Time:" + getUpdatedTime() + "|KeyValue:["; 
		for(Map.Entry<String, String> entry: keyValueMap.entrySet()) {
			if(suppressFields.contains(entry.getKey().toString())) 
				toString = toString + "|" + entry.getKey() + ":***************";
			else toString = toString + "|" + entry.getKey() + ":" + entry.getValue();
		}
		toString = toString + "]|NativeObject:[" + getNativeObject() + "]}";
		return toString;
	}
	private void generateAndAssignId() {
		this.id = ( this.id == null ? strIdPrefix + A3ServiceUtil.generateRandonAlphaNumberic(
				intIdLength-strIdPrefix.length() <= 0? intIdLength: intIdLength-strIdPrefix.length(),//Message length calculation
						SEPARATOR_TOKEN_LENGTH, SEPARATOR_TOKEN) : this.id);
		
	}
	protected void update() { this.updatedTime = new Timestamp(System.currentTimeMillis()).toString(); }	
}
